apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-tekton-project-nightly
spec:
  params:
  - name: package
    description: package to install
  - name: container-registry
    description: container registry used to publish build images
  - name: kubeconfig-secret
    description: secret with kubeconfig for remote cluster
  - name: target-arch
    description: target architecture for tests (s390x, ppc64le, arm64)
  resources:
    inputs:
    - name: tekton-project-source
      type: git
      targetPath: src/$(params.package)
  steps:
  - name: deploy
    workingdir: /workspace/src/$(params.package)
    image: gcr.io/tekton-releases/dogfooding/test-runner:latest
    env:
    - name: GOPATH
      value: /workspace
    - name: KO_DOCKER_REPO
      value: $(params.container-registry)
    - name: KUBECONFIG
      value: /root/.kube/config
    command:
    - /bin/bash
    args:
    - -ce
    - |
      ko apply --platform=linux/$(params.target-arch) -f config/
      kubectl wait -n tekton-pipelines --for=condition=ready pods --all --timeout=120s
    volumeMounts:
    - name: kubeconfig-secret
      mountPath: /root/.kube
  volumes:
  - name: kubeconfig-secret
    secret:
      secretName: $(params.kubeconfig-secret)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: e2e-remote-tests
spec:
  params:
  - name: package
    description: package (and its children) under test
  - name: tests-path
    description: path to the tests within "tests" git resource
    default: ./test
  - name: timeout
    description: timeout for the go test runner
    default: 30m
  - name: container-registry
    description: container registry used to push images during tests e.g. gcr.io/tekton-e2e-tests or icr.io/tekton-e2e-tests
  - name: tags
    default: e2e
  - name: target-arch
    description: target architecture for tests (s390x, ppc64le, arm64)
  - name: kubeconfig-secret
    description: secret with kubeconfig for remote cluster
  resources:
    inputs:
    - name: plumbing-source
      type: git
    - name: tekton-project-source
      type: git
      targetPath: src/$(params.package)
  steps:
  - name: run-e2e-tests
    image: gcr.io/tekton-releases/dogfooding/test-runner:latest
    workingdir: /workspace/src/$(params.package)
    env:
    - name: REPO_ROOT_DIR
      value: $(resources.inputs.tekton-project-source.path)
    - name: GOPATH
      value: /workspace
    - name: KO_DOCKER_REPO
      value: $(params.container-registry)
    - name: TEST_RUNTIME_ARCH
      value: $(params.target-arch)
    - name: SYSTEM_NAMESPACE
      value: tekton-pipelines
    - name: KUBECONFIG
      value: /root/.kube/config
    command:
    - /bin/bash
    args:
    - -ce
    - |
      source $(resources.inputs.plumbing-source.path)/scripts/library.sh
      # extend test timeout (from 10 minutes to 20 minutes) to resolve https://github.com/tektoncd/pipeline/issues/3627
      sed -i 's/timeout  = 10/timeout  = 20/g' test/wait.go
      header "Running Go $(params.tags) tests"
      report_go_test -v -count=1 -tags=$(params.tags) -timeout=$(params.timeout) $(params.tests-path) -kubeconfig /root/.kube/config
    volumeMounts:
    - name: kubeconfig-secret
      mountPath: /root/.kube
  volumes:
  - name: kubeconfig-secret
    secret:
      secretName: $(params.kubeconfig-secret)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup-tekton-nightly
spec:
  params:
  - name: package
  - name: resources
    description: space separated list of resources to be deleted
    default: "conditions pipelineresources tasks pipelines taskruns pipelineruns"
  - name: kubeconfig-secret
    description: secret with kubeconfig for remote cluster
  resources:
    inputs:
    - name: plumbing-source
      type: git
    - name: tekton-project-source
      type: git
      targetPath: src/$(params.package)
  steps:
  - name: cleanup-resources
    image: gcr.io/tekton-releases/dogfooding/kubectl:latest
    env:
    - name: KUBECONFIG
      value: /root/.kube/config
    command:
    - /bin/sh
    args:
    - -ce
    - |
      kubectl delete ns -l tekton.dev/test-e2e=true
      for res in $(params.resources); do
        kubectl delete --ignore-not-found=true ${res}.tekton.dev --all || return true
      done
    volumeMounts:
    - name: kubeconfig-secret
      mountPath: /root/.kube
  - name: uninstall-tekton-project
    image: gcr.io/tekton-releases/dogfooding/test-runner:latest
    workingdir: /workspace/src/$(params.package)
    env:
    - name: KUBECONFIG
      value: /root/.kube/config
    command:
    - /bin/bash
    args:
    - -ce
    - |
      source $(resources.inputs.plumbing-source.path)/scripts/library.sh
      ko delete --ignore-not-found=true -f config/
      wait_until_object_does_not_exist namespace tekton-pipelines
    volumeMounts:
    - name: kubeconfig-secret
      mountPath: /root/.kube
  volumes:
  - name: kubeconfig-secret
    secret:
      secretName: $(params.kubeconfig-secret)
